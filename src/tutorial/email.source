---------------------------------------------------------------------------
--
-- email_address.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2013, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/email_address.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'email_address' which represents
--	email_address numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/email$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/email_address.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'email_address_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'email_address'
-- does not exist yet but that's okay.

CREATE FUNCTION email_address_in(cstring)
   RETURNS EmailAddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'email_address_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION email_address_out(EmailAddress)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'email_address_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION email_address_recv(internal)
   RETURNS EmailAddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'email_address_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION email_address_send(EmailAddress)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type.

CREATE TYPE EmailAddress (
   internallength = 513,
   input = email_address_in,
   output = email_address_out,
   receive = email_address_recv,
   send = email_address_send
   --,alignment = char -- todo
);


-----------------------------
-- Interfacing New Types with Indexes:
--	We cannot define a secondary index (eg. a B-tree) over the new type
--	yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------

-- first, define the required operators
CREATE FUNCTION email_address_abs_lt(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_address_abs_le(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_address_abs_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_address_abs_neq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_address_abs_ge(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_address_abs_gt(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_address_abs_match_domain(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_address_abs_not_match_domain(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_address_abs_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_address_abs_le,
   commutator = >= , negator = > ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR = (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_address_abs_eq,
   commutator = = , negator = <> ,
   restrict = eqsel, join = eqjoinsel , HASHES
);
CREATE OPERATOR <> (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_address_abs_neq,
   commutator = <> , negator = = ,
   restrict = neqsel, join = neqjoinsel
);
CREATE OPERATOR >= (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_address_abs_ge,
   commutator = <= , negator = < ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR > (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_address_abs_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR ~ (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_address_abs_match_domain,
   commutator = ~, negator = !~ ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR !~ (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_address_abs_not_match_domain,
   commutator = !~, negator = ~ ,
   restrict = neqsel, join = neqjoinsel
);

-- create the support function too
CREATE FUNCTION email_address_abs_cmp(EmailAddress, EmailAddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_address_abs_hash(EmailAddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

-- now we can make the operator class
CREATE OPERATOR CLASS email_address_abs_ops
    DEFAULT FOR TYPE EmailAddress USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       email_address_abs_cmp(EmailAddress, EmailAddress);

CREATE OPERATOR CLASS email_address_abs_ops_hash
    DEFAULT FOR TYPE EmailAddress USING hash AS
        OPERATOR        1       = ,
        FUNCTION        1       email_address_abs_hash(EmailAddress);


-----------------------------
-- Using the new type:
--  user-defined types can be used like ordinary built-in types.
-----------------------------

-- eg. we can use it in a table
--
--create table Users (
--   username  EmailAddress,
--   loggedIn  timestamp,
--   loggedOut timestamp
--);
--
---- data for user-defined types are just strings in the proper textual
---- representation.
--
--insert into Users(username,loggedIn,loggedOut) values
--('jas@cse.unsw.edu.au','2012-07-01 15:45:55','2012-07-01 15:51:20'),
--('jas@cse.unsw.EDU.AU','2012-07-01 15:50:30','2012-07-01 15:53:15'),
--('z9987654@unsw.edu.au','2012-07-01 15:51:10','2012-07-01 16:01:05'),
--('m.mouse@disney.com','2012-07-01 15:51:11','2012-07-01 16:01:06'),
--('jas@cse.unsw.edu.au','2012-07-01 15:45:55','2012-07-01 15:51:20'),
--('jas@cse.unsw.EDU.AU','2012-07-01 15:50:30','2012-07-01 15:53:15'),
--('z9987654@unsw.edu.au','2012-07-01 15:51:10','2012-07-01 16:01:05'),
--('m.mouse@disney.com','2012-07-01 15:51:11','2012-07-01 16:01:06'),
--('jas@cse.unsw.edu.au','2012-07-01 15:45:55','2012-07-01 15:51:20'),
--('jas@cse.unsw.EDU.AU','2012-07-01 15:50:30','2012-07-01 15:53:15'),
--('z9987654@unsw.edu.au','2012-07-01 15:51:10','2012-07-01 16:01:05'),
--('m.mouse@disney.com','2012-07-01 15:51:11','2012-07-01 16:01:06'),
--('abc@cse.unsw.edu.au','2012-07-01 15:51:11','2012-07-01 16:01:06'),
--('a-user@fast-money.com','2012-07-01 15:52:25','2012-07-01 16:10:15');
--
----insert into Users(username,loggedIn,loggedOut) values
----('"jas"@cse.unsw.edu.au','2012-07-01 15:52:25','2012-07-01 16:10:15');
----('j..shepherd@funny.email.org','2012-07-01 15:52:25','2012-07-01 16:10:15');
----('123jas@marketing.abc.com','2012-07-01 15:52:25','2012-07-01 16:10:15');
----('john@123buynow.com.au','2012-07-01 15:52:25','2012-07-01 16:10:15');
----('jas@cse','2012-07-01 15:52:25','2012-07-01 16:10:15');
----('john@cse.unsw@edu.au','2012-07-01 15:52:25','2012-07-01 16:10:15');
----('x--@gmail.com','2012-07-01 15:52:25','2012-07-01 16:10:15');
--
----SELECT * FROM Users order by username;
--
--create index ha on Users using hash (username);
--
----select username, count(*) from Users
----group  by username;
--
----select a.username, a.loggedIn, b.loggedIn
----from   Users a, Users b
----where  a.username = b.username and a.loggedIn <> b.loggedIn;
--
--CREATE INDEX ind ON Users
--   USING btree(username email_address_abs_ops);
--
--SELECT * from Users where username = 'abc@cse.unsw.edu.au';
----SELECT * from Users where username != 'jas@cse.unsw.edu.au';
----SELECT * from Users where username < 'abc@cse.unsw.edu.au';
----SELECT * from Users where username <= 'abc@cse.unsw.edu.au';
----SELECT * from Users where username > 'abc@cse.unsw.edu.au';
----SELECT * from Users where username >= 'abc@cse.unsw.edu.au';
----SELECT * from Users where username ~ 'abc@cse.unsw.edu.au';
----SELECT * from Users where username !~ 'abc@cse.unsw.edu.au';
--
---- clean up the example
--DROP TABLE users;
--DROP TYPE EmailAddress CASCADE;
